{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accurics Labs Under Construction This documentation is a work in progress and some pages are in draft form. Please stay tuned for updates! Welcome to the Accurics labs! This site contains a variety of labs that can be used to learn Accurics . For feedback, please contact us. About Accurics The adoption of cloud native infrastructure such as serverless, containers, and service mesh are enabling organizations to deliver new innovations to market. Unfortunately, over 30 billion records have been exposed in cloud breaches over the last two years and the velocity of these breaches continues to accelerate. Traditional cloud security approaches are becoming untenable for securing transient cloud native infrastructure. Accurics provides a fundamentally new approach for protecting cloud native infrastructure by embedding security during development to establish a secure posture and maintaining it through runtime. The Accurics platform detects and remediates policy violations as well as potential breach paths across Infrastructure as Code (IaC). It maintains the secure posture by monitoring cloud native infrastructure in runtime and assessing changes for risk. Developers are notified about legitimate changes and the code to update the IaC is checked into the repository for review. In contrast, developers are notified about risky changes and the code to revert to the secure baseline is provided so that they can reprovision the cloud and eliminate the change. Establishing IaC as the single source of truth for risk posture enables immutable security.","title":"Home"},{"location":"#accurics-labs","text":"Under Construction This documentation is a work in progress and some pages are in draft form. Please stay tuned for updates! Welcome to the Accurics labs! This site contains a variety of labs that can be used to learn Accurics . For feedback, please contact us.","title":"Accurics Labs"},{"location":"#about-accurics","text":"The adoption of cloud native infrastructure such as serverless, containers, and service mesh are enabling organizations to deliver new innovations to market. Unfortunately, over 30 billion records have been exposed in cloud breaches over the last two years and the velocity of these breaches continues to accelerate. Traditional cloud security approaches are becoming untenable for securing transient cloud native infrastructure. Accurics provides a fundamentally new approach for protecting cloud native infrastructure by embedding security during development to establish a secure posture and maintaining it through runtime. The Accurics platform detects and remediates policy violations as well as potential breach paths across Infrastructure as Code (IaC). It maintains the secure posture by monitoring cloud native infrastructure in runtime and assessing changes for risk. Developers are notified about legitimate changes and the code to update the IaC is checked into the repository for review. In contrast, developers are notified about risky changes and the code to revert to the secure baseline is provided so that they can reprovision the cloud and eliminate the change. Establishing IaC as the single source of truth for risk posture enables immutable security.","title":"About Accurics"},{"location":"labs/cicd/ado/","text":"Running Accurics in ADO Pipelines TODO Prerequisites TODO Adding a Pipeline YAML file TODO Running the pipeline and reviewing results TODO","title":"Running Accurics in ADO Pipelines"},{"location":"labs/cicd/ado/#running-accurics-in-ado-pipelines","text":"TODO","title":"Running Accurics in ADO Pipelines"},{"location":"labs/cicd/ado/#prerequisites","text":"TODO","title":"Prerequisites"},{"location":"labs/cicd/ado/#adding-a-pipeline-yaml-file","text":"TODO","title":"Adding a Pipeline YAML file"},{"location":"labs/cicd/ado/#running-the-pipeline-and-reviewing-results","text":"TODO","title":"Running the pipeline and reviewing results"},{"location":"labs/cli/installing/","text":"Installing the Accurics CLI Each operating system has a different installation method. Please follow the instructions for your environment. macOS Accurics CLI installation for macOS uses the Homebrew package manager, which needs to be installed first. Once Homebrew is installed, you can use the brew command to install it: 1 2 3 4 5 6 > brew install accurics == > Downloading https://downloads.accurics.com/cli/1.0.15/accurics-cli.dmg ######################################################################## 100.0% == > Installing Cask accurics == > Linking Binary 'accurics' to '/usr/local/bin/accurics' \ud83c\udf7a accurics was successfully installed! Linux The Accurics CLI is downloaded from the Accurics console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download CLI On the next screen select Linux and hit the Submit button Once it's downloaded, you will need to mark it executable and place it in your path. It can also be invoked locally. 1 > chmod +x accurics Windows The Accurics CLI is downloaded from the Accurics console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download CLI On the next screen select Windows and hit the Submit button Place the downloaded executable file in your path","title":"Installing the CLI"},{"location":"labs/cli/installing/#installing-the-accurics-cli","text":"Each operating system has a different installation method. Please follow the instructions for your environment.","title":"Installing the Accurics CLI"},{"location":"labs/cli/installing/#macos","text":"Accurics CLI installation for macOS uses the Homebrew package manager, which needs to be installed first. Once Homebrew is installed, you can use the brew command to install it: 1 2 3 4 5 6 > brew install accurics == > Downloading https://downloads.accurics.com/cli/1.0.15/accurics-cli.dmg ######################################################################## 100.0% == > Installing Cask accurics == > Linking Binary 'accurics' to '/usr/local/bin/accurics' \ud83c\udf7a accurics was successfully installed!","title":"macOS"},{"location":"labs/cli/installing/#linux","text":"The Accurics CLI is downloaded from the Accurics console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download CLI On the next screen select Linux and hit the Submit button Once it's downloaded, you will need to mark it executable and place it in your path. It can also be invoked locally. 1 > chmod +x accurics","title":"Linux"},{"location":"labs/cli/installing/#windows","text":"The Accurics CLI is downloaded from the Accurics console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download CLI On the next screen select Windows and hit the Submit button Place the downloaded executable file in your path","title":"Windows"},{"location":"labs/cli/azure/","text":"Running Accurics CLI Prerequisites Terraform version >= .12 An Accurics user account with an Operator or greater role An Azure subscription with enough permissions to create a resource and network security group Setup an environment on the Accurics Console to scan your IAC repository that you will be using to create the CI/CD builds Install the Accurics CLI suitable for your operating system Step 1: Log in to Azure For Terraform to be able to successfully plan , you must first authenticate to Azure. There are multiple ways to do this, depending on your organizations preference. Please see the HashiCorp documentation links below for more information: Azure Provider: Authenticating using the Azure CLI Azure Provider: Authenticating using managed identities for Azure resources Azure Provider: Authenticating using a Service Principal with a Client Certificate Azure Provider: Authenticating using a Service Principal with a Client Secret Step 2: Download configuration file Depending on your organization, you may already have a copy of your Accurics configuration file. If one hasn't been supplied to you, it can be downloaded from the Accurics Console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download Config Save the file to your computer to a folder of your choosing. Step 3: Sample Terraform Code Please copy the Terraform code below and save it as azure_example.tf to the same folder as the configuration file. Danger The Terraform code below is an example of what could be considered a bad practice (opening SSH to the world) and should not be used in your environment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"0.0.0.0/0\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name } Step 4: accurics init accurics init is a wrapper around terraform init that downloads all the required Terraform providers, and is required prior to running any further commands. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 > accurics init Initializing the backend... Initializing provider plugins... - Reusing previous version of hashicorp/azurerm from the dependency lock file - Installing hashicorp/azurerm v2.50.0... - Installed hashicorp/azurerm v2.50.0 (signed by HashiCorp) Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Step 5: accurics plan We're at the point where it's time to scan the sample Terraform you saved above! Let's run accurics plan which is a wrapper around terraform plan that: Runs a terraform plan Runs an analysis that compares the Terraform code to the resources that Terraform will create Generates a dependency graph Outputs JSON ( accurics_report.json ) and HTML ( accurics_report.html ) files listing any violations Gives you a summary of how many resources are in the Terraform code, and number of violations sorted by severity Uploads the results to the Accurics Console so they can be viewed online To run the plan, open a Terminal/Command Prompt to the directory where the Terraform and configuration file is saved and run the following command: Note You may have saved the configuration file to another location, please adjust the path accordingly. By default the Accurics CLI looks in ~/.accurics/config and the CWD that accurics plan is executed from. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 > accurics plan -config=config 2021/03/10 15:49:51 runPlan... 2021/03/10 15:49:51 [plan -out=1615412991082.out] 2021/03/10 15:50:03 Running Accurics analysis... [snipped]/iac/azure 2021/03/10 15:50:03 mapping terraform resources to source code... 2021/03/10 15:50:03 Repo Root Path... [snipped]/iac/azure 2021/03/10 15:50:03 Current working directory ... [snipped]/iac/azure 2021/03/10 15:50:03 getting source code for all the resources present in '[snipped]/iac/azure' 2021/03/10 15:50:03 resources to source code mapping done! 2021/03/10 15:50:03 Creating dependency graph... 2021/03/10 15:50:03 GetDotFileUsingGraph Directory: [snipped]/iac/azure 2021/03/10 15:50:03 Using configuration file:- [snipped]/config ---------------------------------------------------------------------------------------------------------------- Accurics successfully scanned the repository! Following is the summary - for details visit Accurics Web Console. { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 } ---------------------------------------------------------------------------------------------------------------- Step 6: Viewing results The Accurics CLI outputs results in a few ways. To stdout as a summary of the quantity and severity of what was found. A JSON blob in the directory you ran the Accurics CLI from An HTML file that is also in the directory you ran the Accurics CLI from The HTML is probably the most human readable format, so let's open that and see what it says! Do you see the violation for SSH (TCP:22) is exposed to the entire public internet ? Let's try fixing that and rerunning accurics plan Note In this lab, there will always be an policy violation for Azure Resource Groups. This is because the code needs to be deployed to the cloud for Accurics to detect the lock. Resource Manager Locks allow administrators to lock down Azure resources and prevent deletion or changing of resources. You can set the lock level to CanNotDelete or ReadOnly. In the portal, the locks are called Delete and Read-only respectively. It is recommended to have locks enabled to prevent accidental or malicious change or deletion. Ensure that Azure Resource Group has resource lock enabled Step 7: Fixing bad IaC and rescanning Please remediate your Terraform with the highlighted changes below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"10.10.10.0/24\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name } Let's rerun accurics plan and see how many violations it's found after fixing the two violations: 1 2 3 4 5 6 7 8 9 10 11 12 { \"resources\" : 4 , \"violation\" : 1 , \"low\" : 1 , \"medium\" : 0 , \"high\" : 0 , \"native\" : 1 , \"inherit\" : 0 , \"drift\" : 0 , \"iacdrift\" : 0 , \"clouddrift\" : 0 }","title":"Running the CLI"},{"location":"labs/cli/azure/#running-accurics-cli","text":"","title":"Running Accurics CLI"},{"location":"labs/cli/azure/#prerequisites","text":"Terraform version >= .12 An Accurics user account with an Operator or greater role An Azure subscription with enough permissions to create a resource and network security group Setup an environment on the Accurics Console to scan your IAC repository that you will be using to create the CI/CD builds Install the Accurics CLI suitable for your operating system","title":"Prerequisites"},{"location":"labs/cli/azure/#step-1-log-in-to-azure","text":"For Terraform to be able to successfully plan , you must first authenticate to Azure. There are multiple ways to do this, depending on your organizations preference. Please see the HashiCorp documentation links below for more information: Azure Provider: Authenticating using the Azure CLI Azure Provider: Authenticating using managed identities for Azure resources Azure Provider: Authenticating using a Service Principal with a Client Certificate Azure Provider: Authenticating using a Service Principal with a Client Secret","title":"Step 1: Log in to Azure"},{"location":"labs/cli/azure/#step-2-download-configuration-file","text":"Depending on your organization, you may already have a copy of your Accurics configuration file. If one hasn't been supplied to you, it can be downloaded from the Accurics Console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download Config Save the file to your computer to a folder of your choosing.","title":"Step 2: Download configuration file"},{"location":"labs/cli/azure/#step-3-sample-terraform-code","text":"Please copy the Terraform code below and save it as azure_example.tf to the same folder as the configuration file. Danger The Terraform code below is an example of what could be considered a bad practice (opening SSH to the world) and should not be used in your environment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"0.0.0.0/0\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name }","title":"Step 3: Sample Terraform Code"},{"location":"labs/cli/azure/#step-4-accurics-init","text":"accurics init is a wrapper around terraform init that downloads all the required Terraform providers, and is required prior to running any further commands. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 > accurics init Initializing the backend... Initializing provider plugins... - Reusing previous version of hashicorp/azurerm from the dependency lock file - Installing hashicorp/azurerm v2.50.0... - Installed hashicorp/azurerm v2.50.0 (signed by HashiCorp) Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary.","title":"Step 4: accurics init"},{"location":"labs/cli/azure/#step-5-accurics-plan","text":"We're at the point where it's time to scan the sample Terraform you saved above! Let's run accurics plan which is a wrapper around terraform plan that: Runs a terraform plan Runs an analysis that compares the Terraform code to the resources that Terraform will create Generates a dependency graph Outputs JSON ( accurics_report.json ) and HTML ( accurics_report.html ) files listing any violations Gives you a summary of how many resources are in the Terraform code, and number of violations sorted by severity Uploads the results to the Accurics Console so they can be viewed online To run the plan, open a Terminal/Command Prompt to the directory where the Terraform and configuration file is saved and run the following command: Note You may have saved the configuration file to another location, please adjust the path accordingly. By default the Accurics CLI looks in ~/.accurics/config and the CWD that accurics plan is executed from. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 > accurics plan -config=config 2021/03/10 15:49:51 runPlan... 2021/03/10 15:49:51 [plan -out=1615412991082.out] 2021/03/10 15:50:03 Running Accurics analysis... [snipped]/iac/azure 2021/03/10 15:50:03 mapping terraform resources to source code... 2021/03/10 15:50:03 Repo Root Path... [snipped]/iac/azure 2021/03/10 15:50:03 Current working directory ... [snipped]/iac/azure 2021/03/10 15:50:03 getting source code for all the resources present in '[snipped]/iac/azure' 2021/03/10 15:50:03 resources to source code mapping done! 2021/03/10 15:50:03 Creating dependency graph... 2021/03/10 15:50:03 GetDotFileUsingGraph Directory: [snipped]/iac/azure 2021/03/10 15:50:03 Using configuration file:- [snipped]/config ---------------------------------------------------------------------------------------------------------------- Accurics successfully scanned the repository! Following is the summary - for details visit Accurics Web Console. { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 } ----------------------------------------------------------------------------------------------------------------","title":"Step 5: accurics plan"},{"location":"labs/cli/azure/#step-6-viewing-results","text":"The Accurics CLI outputs results in a few ways. To stdout as a summary of the quantity and severity of what was found. A JSON blob in the directory you ran the Accurics CLI from An HTML file that is also in the directory you ran the Accurics CLI from The HTML is probably the most human readable format, so let's open that and see what it says! Do you see the violation for SSH (TCP:22) is exposed to the entire public internet ? Let's try fixing that and rerunning accurics plan Note In this lab, there will always be an policy violation for Azure Resource Groups. This is because the code needs to be deployed to the cloud for Accurics to detect the lock. Resource Manager Locks allow administrators to lock down Azure resources and prevent deletion or changing of resources. You can set the lock level to CanNotDelete or ReadOnly. In the portal, the locks are called Delete and Read-only respectively. It is recommended to have locks enabled to prevent accidental or malicious change or deletion. Ensure that Azure Resource Group has resource lock enabled","title":"Step 6: Viewing results"},{"location":"labs/cli/azure/#step-7-fixing-bad-iac-and-rescanning","text":"Please remediate your Terraform with the highlighted changes below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"10.10.10.0/24\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name } Let's rerun accurics plan and see how many violations it's found after fixing the two violations: 1 2 3 4 5 6 7 8 9 10 11 12 { \"resources\" : 4 , \"violation\" : 1 , \"low\" : 1 , \"medium\" : 0 , \"high\" : 0 , \"native\" : 1 , \"inherit\" : 0 , \"drift\" : 0 , \"iacdrift\" : 0 , \"clouddrift\" : 0 }","title":"Step 7: Fixing bad IaC and rescanning"},{"location":"labs/console/scm/ado/","text":"Scanning Azure DevOps Repositories with Accurics You can use the Accurics Console to scan an Azure DevOps repository. Prerequisites An Accurics Enterprise user account with an Operator or greater role An Azure subscription with enough permissions to create a resource and network security group An Azure DevOps organization with an empty project that you have basic access to Step 1: Initializing an Azure DevOps Repository If you haven't used Azure DevOps Repositories before, the easiest way to initialize a repository is with a README file: Initialize the repository by going to Repos , Files and then clicking the Intialize button Step 2: Adding IaC to your repository Now it's time to push the following IaC to your Azure DevOps repository using git. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"0.0.0.0/0\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name } Not familiar with git? Click the three vertical dots on the right side of the page and select Upload File(s) Click Browse... , find the file that you saved from above, and click Commit Step 2: Add an environment to the Accurics Console The next step is to add the ADO repository that you created above to the Accurics Console and scan it. One or more repositories are added to an Accurics Environment container. You can also connect an Accurics Environment to a a cloud account to compare IaC in a source code repository to a cloud runtime environment, but for the purposes of this lab, we will focus on IaC scanning. Log into the Accurics Console Click on the New Environment button at the top right Enter an Environment Name , such as \"ADO-Test\" Select Enterprise Mode Click Next Select Azure and unselect Configure Cloud Scan Click Next Expand Integrate with Azure DevOps and click Connect to Azure DevOps . You may be asked to log into your account - please do so. Under Select your IaC Repositories click the Select button Select the repository you created earlier Info You can type the name of the repository in the window to start a search Click Submit Click Next Now we get to select the policies to be enforced. For this lab, let's select Accurics Security Best Practices for Azure v2 Info The Accurics platform has over 1800 policies at the time of writing this lab, ranging from CIS Benchmarks to HIPAA and GDPR. We also have an in-house security research team that is always writing new policies to detect the latest in cloud security issues. That's not all though! You can write your own policies using the Rego Policy Language Click Next Click Finish Step 3: Scan the source code The next step is to scan the IaC source code repository. To do so, simply click the Run IAC Scan button at the top right. After a short while, results will be populated on the dashboard screen. Step 4: Reviewing the results Finally, let's review the results. You'll notice that after you run an IaC scan that the dashboard now has information populated in it: Discovered Resources The Discovered Resources section displays the number of discovered resources in both your IaC and Cloud. In this case, because we are only performing IaC scanning, we only show the 3 IaC resources that we found in the Terraform that you committed to Azure DevOps above. If Cloud Scan were enabled, the numbers would be equal in an ideal world, but if not all of your cloud runtime is deployed via IaC you would have more resources deployed in the cloud than in your IaC. Info A resource is a single cloud/IaC element, such as instance, security group, IP address, database, etc. Recent Changes The Recent Changes section displays the amount of resources added or removed in the environment, the number of resource drifts between IaC and the cloud, and configuration drifts in IaC and the cloud runtime environment. In this lab, these will all be 0, because there is no cloud and no changes have been made in the IaC. This section is particularly useful to quickly spot how many resources changed since the last scan and to show how many drifts you have to help ascertain where changes are being made. An example would be if there were cloud drifts that were not reflected in IaC, that would signal that someone is making modifications in cloud runtime without pushing those changes to IaC - not great! Violations Detected Finally, the Violations Detected section displays the number of policy violations in cloud/IaC and how many of them are ignored. The code above has two individual violations, so the number two (2) is displayed under IaC Violations . If you click the View all issues link at the bottom, you can see a list of violations and the severity of the issue. Click on SSH (TCP:22) is exposed to the entire public internet and a pane will pop up that gives you more information, including remediation steps and a link to additional information. Extra Credit Fix the SSH violation, rescan the repo, and watch the violation go away!","title":"Azure DevOps"},{"location":"labs/console/scm/ado/#scanning-azure-devops-repositories-with-accurics","text":"You can use the Accurics Console to scan an Azure DevOps repository.","title":"Scanning Azure DevOps Repositories with Accurics"},{"location":"labs/console/scm/ado/#prerequisites","text":"An Accurics Enterprise user account with an Operator or greater role An Azure subscription with enough permissions to create a resource and network security group An Azure DevOps organization with an empty project that you have basic access to","title":"Prerequisites"},{"location":"labs/console/scm/ado/#step-1-initializing-an-azure-devops-repository","text":"If you haven't used Azure DevOps Repositories before, the easiest way to initialize a repository is with a README file: Initialize the repository by going to Repos , Files and then clicking the Intialize button","title":"Step 1: Initializing an Azure DevOps Repository"},{"location":"labs/console/scm/ado/#step-2-adding-iac-to-your-repository","text":"Now it's time to push the following IaC to your Azure DevOps repository using git. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 provider \"azurerm\" { features {} } variable \"resource_group\" { default = \"foo\" } variable \"location\" { default = \"centralus\" } resource \"azurerm_resource_group\" \"rg\" { name = var . resource_group location = var . location } resource \"azurerm_network_security_group\" \"azure_nsg\" { name = \"accurics_demo\" location = azurerm_resource_group . rg . location resource_group_name = azurerm_resource_group . rg . name } resource \"azurerm_network_security_rule\" \"ssh\" { name = \"accurics_demo_ssh\" priority = 100 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"22\" destination_port_range = \"22\" source_address_prefix = \"0.0.0.0/0\" resource_group_name = azurerm_resource_group . rg . name network_security_group_name = azurerm_network_security_group . azure_nsg . name }","title":"Step 2: Adding IaC to your repository"},{"location":"labs/console/scm/ado/#not-familiar-with-git","text":"Click the three vertical dots on the right side of the page and select Upload File(s) Click Browse... , find the file that you saved from above, and click Commit","title":"Not familiar with git?"},{"location":"labs/console/scm/ado/#step-2-add-an-environment-to-the-accurics-console","text":"The next step is to add the ADO repository that you created above to the Accurics Console and scan it. One or more repositories are added to an Accurics Environment container. You can also connect an Accurics Environment to a a cloud account to compare IaC in a source code repository to a cloud runtime environment, but for the purposes of this lab, we will focus on IaC scanning. Log into the Accurics Console Click on the New Environment button at the top right Enter an Environment Name , such as \"ADO-Test\" Select Enterprise Mode Click Next Select Azure and unselect Configure Cloud Scan Click Next Expand Integrate with Azure DevOps and click Connect to Azure DevOps . You may be asked to log into your account - please do so. Under Select your IaC Repositories click the Select button Select the repository you created earlier Info You can type the name of the repository in the window to start a search Click Submit Click Next Now we get to select the policies to be enforced. For this lab, let's select Accurics Security Best Practices for Azure v2 Info The Accurics platform has over 1800 policies at the time of writing this lab, ranging from CIS Benchmarks to HIPAA and GDPR. We also have an in-house security research team that is always writing new policies to detect the latest in cloud security issues. That's not all though! You can write your own policies using the Rego Policy Language Click Next Click Finish","title":"Step 2: Add an environment to the Accurics Console"},{"location":"labs/console/scm/ado/#step-3-scan-the-source-code","text":"The next step is to scan the IaC source code repository. To do so, simply click the Run IAC Scan button at the top right. After a short while, results will be populated on the dashboard screen.","title":"Step 3: Scan the source code"},{"location":"labs/console/scm/ado/#step-4-reviewing-the-results","text":"Finally, let's review the results. You'll notice that after you run an IaC scan that the dashboard now has information populated in it:","title":"Step 4: Reviewing the results"},{"location":"labs/console/scm/ado/#discovered-resources","text":"The Discovered Resources section displays the number of discovered resources in both your IaC and Cloud. In this case, because we are only performing IaC scanning, we only show the 3 IaC resources that we found in the Terraform that you committed to Azure DevOps above. If Cloud Scan were enabled, the numbers would be equal in an ideal world, but if not all of your cloud runtime is deployed via IaC you would have more resources deployed in the cloud than in your IaC. Info A resource is a single cloud/IaC element, such as instance, security group, IP address, database, etc.","title":"Discovered Resources"},{"location":"labs/console/scm/ado/#recent-changes","text":"The Recent Changes section displays the amount of resources added or removed in the environment, the number of resource drifts between IaC and the cloud, and configuration drifts in IaC and the cloud runtime environment. In this lab, these will all be 0, because there is no cloud and no changes have been made in the IaC. This section is particularly useful to quickly spot how many resources changed since the last scan and to show how many drifts you have to help ascertain where changes are being made. An example would be if there were cloud drifts that were not reflected in IaC, that would signal that someone is making modifications in cloud runtime without pushing those changes to IaC - not great!","title":"Recent Changes"},{"location":"labs/console/scm/ado/#violations-detected","text":"Finally, the Violations Detected section displays the number of policy violations in cloud/IaC and how many of them are ignored. The code above has two individual violations, so the number two (2) is displayed under IaC Violations . If you click the View all issues link at the bottom, you can see a list of violations and the severity of the issue. Click on SSH (TCP:22) is exposed to the entire public internet and a pane will pop up that gives you more information, including remediation steps and a link to additional information.","title":"Violations Detected"},{"location":"labs/console/scm/ado/#extra-credit","text":"Fix the SSH violation, rescan the repo, and watch the violation go away!","title":"Extra Credit"},{"location":"labs/ide/vscode/","text":"Running the Accurics VS Code Extension The Accurics VS Code Extension can be run inside of Microsoft VS Code either through a right click action on a file, or the quick launcher. Prerequisites Microsoft VS Code Microsoft VS Code Terraform extension Terraform version >= .12 For Integrated mode scans, an Accurics user account with an Operator or greater role For Integrated mode scans, an Azure subscription with enough permissions to create a resource and network security group For Integrated mode scans, an environment on the Accurics Console to scan your IAC repository that you will be using to create the CI/CD builds Installation The first step is to install the Accurics VS Code extension. You can either install it directly from inside VS Code Extension Marketplace itself, or by following this link to the extension documentation and clicking Install on the page. Note You must have the Microsoft VS Code Terraform extension for the extension to properly work. Modes The Accurics extension has two modes of operation: Standalone and Integrated . Standalone mode does not require an Accurics account. Any violations will be printed to the console. Integrated mode requires a configuration file and an Accurics account. Violations will be uploaded to the Accurics console and to the local directory in JSON/HTML format. To select the mode, you can use the Command Palette. The keyboard shortcut for this differs per platform and you can find reference guides on Microsoft's website . For macOS, the default key bind is Cmd + Shift + P Once in the Command Palette, you can enter Accurics and Accurics Mode will be an option. Select it or hit Enter Select the mode or hit Enter Standalone A standalone scan doesn't require an Accurics account and can be run by either right clicking an IaC file, or by using the Command Palette in Microsoft VS Code and selecting Accurics Scan . Integrated With inteagrated mode, violations will be uploaded to the Accurics console and to the local directory in JSON/HTML format. It also uses policies set in the console. Step 1: Download configuration file Depending on your organization, you may already have a copy of your Accurics configuration file. If one hasn't been supplied to you, it can be downloaded from the Accurics Console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download Config Save the file to your computer to a folder of your choosing. Step 2: Run Accurics Configuration You will need to configure the Accurics extension to use the previously downloaded configuration. To do so: Enter the VS Code Command Palette and open Accurics Configuration Navigate to the downloaded configuration file and double click the file Step 3: Scanning IaC The final step is scanning the IaC. This is done in two stages, first with a one time accurics init and then an accurics scan . The workflow is similar to running Accurics directly from the CLI. Step 3.1: accurics init accurics init is a wrapper around terraform init that downloads all the required Terraform providers, and is required prior to running any futher commands. To run an init, right click a file and select Accurics Scan -> Init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Running Accurics init... init Complete. 2021/03/21 18:49:25 Starting accurics cli 2021/03/21 18:49:25 CliVersion: 1.0.8 Terraform version Detected 0.14.x Initializing the backend... Initializing provider plugins... - Reusing previous version of hashicorp/azurerm from the dependency lock file - Using previously-installed hashicorp/azurerm v2.51.0 Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Step 3.2: accurics plan After initalizing the IaC, you must run accurics plan , which is a wrapper around terraform plan that: Runs a terraform plan Runs an analysis that compares the Terraform code to the resources that Terraform will create Generates a dependency graph Outputs JSON and HTML files listing any violations Gives you a summary of how many resources are in the Terraform code, and number of violations sorted by severity Uploads the results to the Accurics Console so they can be viewed online To run a plan, right click a file and select Accurics Scan -> Plan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 Running Accurics plan... plan Complete. 2021/03/21 18:54:37 Starting accurics cli 2021/03/21 18:54:37 CliVersion: 1.0.8 2021/03/21 18:54:38 runPlan... 2021/03/21 18:54:38 [plan -out=1616370878078.out] 2021/03/21 18:55:00 Running Accurics analysis... 2021/03/21 18:55:00 mapping terraform resources to source code... 2021/03/21 18:55:00 Repo Root Path... [snipped]/iac/azure/broken 2021/03/21 18:55:00 Current working directory ... [snipped]/iac/azure/broken 2021/03/21 18:55:00 getting source code for all the resources present in '[snipped]/iac/azure/broken' 2021/03/21 18:55:00 resources to source code mapping done! 2021/03/21 18:55:00 Creating dependency graph... 2021/03/21 18:55:00 GetDotFileUsingGraph Directory: [snipped]/iac/azure/broken 2021/03/21 18:55:00 Using configuration file:- [snipped]/config Terraform version Detected 0.14.x .................................................................................... [snipped] ---------------------------------------------------------------------------------------------------------------- Accurics successfully scanned the repository! Following is the summary - for details visit Accurics Web Console. { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 } ---------------------------------------------------------------------------------------------------------------- { \"scanId\": \"[snipped]\", \"envId\": \"[snipped]\", \"envName\": \"Accurics CLI\", \"summary\": { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 }, \"enforcingModeSummary\": { \"violation\": 0, \"low\": 0, \"medium\": 0, \"high\": 0 }, \"violations\": [ { \"type\": \"azurerm_network_security_rule\", \"id\": \"azurerm_network_security_rule.ssh\", \"name\": \"ssh\", \"source\": \"Accurics CLI/azure_example_broken.tf\", \"rule\": \"networkPort22ExposedPublicEntire_1000\", \"vulnerability\": \"SSH (TCP:22) is exposed to the entire public internet\", \"remediation\": \"Limit the access scope for 'SSH' to only allow access in internal networks and limited scope. If public interface exists, remove it and limit the access scope within the VNET only to applications or instances that requires access. See https://docs.microsoft.com/en-us/azure/virtual-machines/virtual-machines-windows-nsg-quickstart-portal.\", \"severity\": \"HIGH\", \"inference\": \"native\", \"policyName\": \"Accurics Security Best Practices for Azure v2\", \"ruleDisplayName\": \"SSH (TCP:22) is exposed to the entire public internet\", \"policyMode\": \"Regular\" }, { \"type\": \"azurerm_resource_group\", \"id\": \"azurerm_resource_group.rg\", \"name\": \"rg\", \"source\": \"Accurics CLI/azure_example_broken.tf\", \"rule\": \"resourceGroupLock_1000\", \"vulnerability\": \"Ensure that Azure Resource Group has resource lock enabled\", \"remediation\": \"Resource Manager Locks allow administrators to lock down Azure resources and prevent deletion or changing of resources. You can set the lock level to CanNotDelete or ReadOnly. In the portal, the locks are called Delete and Read-only respectively. It is recommended to have locks enabled to prevent accidental or malicious change or deletion.\", \"severity\": \"LOW\", \"inference\": \"native\", \"policyName\": \"Accurics Security Best Practices for Azure v2\", \"ruleDisplayName\": \"Ensure that Azure Resource Group has resource lock enabled\", \"policyMode\": \"Regular\" } ], \"HasErrors\": false } Step 4: Viewing results The Accurics extension outputs results in a few ways. In the Accurics Console To stdout in the VS Code Output pane A JSON blob in the directory you ran the Accurics CLI from An HTML file that is also in the directory you ran the Accurics CLI from","title":"Microsoft VS Code"},{"location":"labs/ide/vscode/#running-the-accurics-vs-code-extension","text":"The Accurics VS Code Extension can be run inside of Microsoft VS Code either through a right click action on a file, or the quick launcher.","title":"Running the Accurics VS Code Extension"},{"location":"labs/ide/vscode/#prerequisites","text":"Microsoft VS Code Microsoft VS Code Terraform extension Terraform version >= .12 For Integrated mode scans, an Accurics user account with an Operator or greater role For Integrated mode scans, an Azure subscription with enough permissions to create a resource and network security group For Integrated mode scans, an environment on the Accurics Console to scan your IAC repository that you will be using to create the CI/CD builds","title":"Prerequisites"},{"location":"labs/ide/vscode/#installation","text":"The first step is to install the Accurics VS Code extension. You can either install it directly from inside VS Code Extension Marketplace itself, or by following this link to the extension documentation and clicking Install on the page. Note You must have the Microsoft VS Code Terraform extension for the extension to properly work.","title":"Installation"},{"location":"labs/ide/vscode/#modes","text":"The Accurics extension has two modes of operation: Standalone and Integrated . Standalone mode does not require an Accurics account. Any violations will be printed to the console. Integrated mode requires a configuration file and an Accurics account. Violations will be uploaded to the Accurics console and to the local directory in JSON/HTML format. To select the mode, you can use the Command Palette. The keyboard shortcut for this differs per platform and you can find reference guides on Microsoft's website . For macOS, the default key bind is Cmd + Shift + P Once in the Command Palette, you can enter Accurics and Accurics Mode will be an option. Select it or hit Enter Select the mode or hit Enter","title":"Modes"},{"location":"labs/ide/vscode/#standalone","text":"A standalone scan doesn't require an Accurics account and can be run by either right clicking an IaC file, or by using the Command Palette in Microsoft VS Code and selecting Accurics Scan .","title":"Standalone"},{"location":"labs/ide/vscode/#integrated","text":"With inteagrated mode, violations will be uploaded to the Accurics console and to the local directory in JSON/HTML format. It also uses policies set in the console.","title":"Integrated"},{"location":"labs/ide/vscode/#step-1-download-configuration-file","text":"Depending on your organization, you may already have a copy of your Accurics configuration file. If one hasn't been supplied to you, it can be downloaded from the Accurics Console. Log into the Accurics console Click the three vertical dots to open the menu for your environment Click Download Config Save the file to your computer to a folder of your choosing.","title":"Step 1: Download configuration file"},{"location":"labs/ide/vscode/#step-2-run-accurics-configuration","text":"You will need to configure the Accurics extension to use the previously downloaded configuration. To do so: Enter the VS Code Command Palette and open Accurics Configuration Navigate to the downloaded configuration file and double click the file","title":"Step 2: Run Accurics Configuration"},{"location":"labs/ide/vscode/#step-3-scanning-iac","text":"The final step is scanning the IaC. This is done in two stages, first with a one time accurics init and then an accurics scan . The workflow is similar to running Accurics directly from the CLI.","title":"Step 3: Scanning IaC"},{"location":"labs/ide/vscode/#step-31-accurics-init","text":"accurics init is a wrapper around terraform init that downloads all the required Terraform providers, and is required prior to running any futher commands. To run an init, right click a file and select Accurics Scan -> Init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Running Accurics init... init Complete. 2021/03/21 18:49:25 Starting accurics cli 2021/03/21 18:49:25 CliVersion: 1.0.8 Terraform version Detected 0.14.x Initializing the backend... Initializing provider plugins... - Reusing previous version of hashicorp/azurerm from the dependency lock file - Using previously-installed hashicorp/azurerm v2.51.0 Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary.","title":"Step 3.1: accurics init"},{"location":"labs/ide/vscode/#step-32-accurics-plan","text":"After initalizing the IaC, you must run accurics plan , which is a wrapper around terraform plan that: Runs a terraform plan Runs an analysis that compares the Terraform code to the resources that Terraform will create Generates a dependency graph Outputs JSON and HTML files listing any violations Gives you a summary of how many resources are in the Terraform code, and number of violations sorted by severity Uploads the results to the Accurics Console so they can be viewed online To run a plan, right click a file and select Accurics Scan -> Plan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 Running Accurics plan... plan Complete. 2021/03/21 18:54:37 Starting accurics cli 2021/03/21 18:54:37 CliVersion: 1.0.8 2021/03/21 18:54:38 runPlan... 2021/03/21 18:54:38 [plan -out=1616370878078.out] 2021/03/21 18:55:00 Running Accurics analysis... 2021/03/21 18:55:00 mapping terraform resources to source code... 2021/03/21 18:55:00 Repo Root Path... [snipped]/iac/azure/broken 2021/03/21 18:55:00 Current working directory ... [snipped]/iac/azure/broken 2021/03/21 18:55:00 getting source code for all the resources present in '[snipped]/iac/azure/broken' 2021/03/21 18:55:00 resources to source code mapping done! 2021/03/21 18:55:00 Creating dependency graph... 2021/03/21 18:55:00 GetDotFileUsingGraph Directory: [snipped]/iac/azure/broken 2021/03/21 18:55:00 Using configuration file:- [snipped]/config Terraform version Detected 0.14.x .................................................................................... [snipped] ---------------------------------------------------------------------------------------------------------------- Accurics successfully scanned the repository! Following is the summary - for details visit Accurics Web Console. { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 } ---------------------------------------------------------------------------------------------------------------- { \"scanId\": \"[snipped]\", \"envId\": \"[snipped]\", \"envName\": \"Accurics CLI\", \"summary\": { \"resources\": 3, \"violation\": 2, \"low\": 1, \"medium\": 0, \"high\": 1, \"native\": 2, \"inherit\": 0, \"drift\": 0, \"iacdrift\": 0, \"clouddrift\": 0 }, \"enforcingModeSummary\": { \"violation\": 0, \"low\": 0, \"medium\": 0, \"high\": 0 }, \"violations\": [ { \"type\": \"azurerm_network_security_rule\", \"id\": \"azurerm_network_security_rule.ssh\", \"name\": \"ssh\", \"source\": \"Accurics CLI/azure_example_broken.tf\", \"rule\": \"networkPort22ExposedPublicEntire_1000\", \"vulnerability\": \"SSH (TCP:22) is exposed to the entire public internet\", \"remediation\": \"Limit the access scope for 'SSH' to only allow access in internal networks and limited scope. If public interface exists, remove it and limit the access scope within the VNET only to applications or instances that requires access. See https://docs.microsoft.com/en-us/azure/virtual-machines/virtual-machines-windows-nsg-quickstart-portal.\", \"severity\": \"HIGH\", \"inference\": \"native\", \"policyName\": \"Accurics Security Best Practices for Azure v2\", \"ruleDisplayName\": \"SSH (TCP:22) is exposed to the entire public internet\", \"policyMode\": \"Regular\" }, { \"type\": \"azurerm_resource_group\", \"id\": \"azurerm_resource_group.rg\", \"name\": \"rg\", \"source\": \"Accurics CLI/azure_example_broken.tf\", \"rule\": \"resourceGroupLock_1000\", \"vulnerability\": \"Ensure that Azure Resource Group has resource lock enabled\", \"remediation\": \"Resource Manager Locks allow administrators to lock down Azure resources and prevent deletion or changing of resources. You can set the lock level to CanNotDelete or ReadOnly. In the portal, the locks are called Delete and Read-only respectively. It is recommended to have locks enabled to prevent accidental or malicious change or deletion.\", \"severity\": \"LOW\", \"inference\": \"native\", \"policyName\": \"Accurics Security Best Practices for Azure v2\", \"ruleDisplayName\": \"Ensure that Azure Resource Group has resource lock enabled\", \"policyMode\": \"Regular\" } ], \"HasErrors\": false }","title":"Step 3.2: accurics plan"},{"location":"labs/ide/vscode/#step-4-viewing-results","text":"The Accurics extension outputs results in a few ways. In the Accurics Console To stdout in the VS Code Output pane A JSON blob in the directory you ran the Accurics CLI from An HTML file that is also in the directory you ran the Accurics CLI from","title":"Step 4: Viewing results"}]}